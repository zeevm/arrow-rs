(function() {
    var type_impls = Object.fromEntries([["parquet",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ArrowReaderBuilder%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#77-241\">Source</a><a href=\"#impl-ArrowReaderBuilder%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html\" title=\"struct parquet::arrow::arrow_reader::ArrowReaderBuilder\">ArrowReaderBuilder</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new_builder\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#78-92\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.new_builder\" class=\"fn\">new_builder</a>(input: T, metadata: <a class=\"struct\" href=\"parquet/arrow/arrow_reader/struct.ArrowReaderMetadata.html\" title=\"struct parquet::arrow::arrow_reader::ArrowReaderMetadata\">ArrowReaderMetadata</a>) -&gt; Self</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.metadata\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#95-97\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.metadata\" class=\"fn\">metadata</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"parquet/file/metadata/struct.ParquetMetaData.html\" title=\"struct parquet::file::metadata::ParquetMetaData\">ParquetMetaData</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the <a href=\"parquet/file/metadata/struct.ParquetMetaData.html\" title=\"struct parquet::file::metadata::ParquetMetaData\"><code>ParquetMetaData</code></a> for this parquet file</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parquet_schema\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#100-102\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.parquet_schema\" class=\"fn\">parquet_schema</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"parquet/schema/types/struct.SchemaDescriptor.html\" title=\"struct parquet::schema::types::SchemaDescriptor\">SchemaDescriptor</a></h4></section></summary><div class=\"docblock\"><p>Returns the parquet <a href=\"parquet/schema/types/struct.SchemaDescriptor.html\" title=\"struct parquet::schema::types::SchemaDescriptor\"><code>SchemaDescriptor</code></a> for this parquet file</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.schema\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#105-107\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.schema\" class=\"fn\">schema</a>(&amp;self) -&gt; &amp;SchemaRef</h4></section></summary><div class=\"docblock\"><p>Returns the arrow [<code>SchemaRef</code>] for this parquet file</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_batch_size\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#111-115\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_batch_size\" class=\"fn\">with_batch_size</a>(self, batch_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Set the size of [<code>RecordBatch</code>] to produce. Defaults to 1024\nIf the batch_size more than the file row count, use the file row count.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_row_groups\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#120-125\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_row_groups\" class=\"fn\">with_row_groups</a>(self, row_groups: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Only read data from the provided row group indexes</p>\n<p>This is also called row group filtering</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_projection\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#128-133\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_projection\" class=\"fn\">with_projection</a>(self, mask: <a class=\"struct\" href=\"parquet/arrow/struct.ProjectionMask.html\" title=\"struct parquet::arrow::ProjectionMask\">ProjectionMask</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Only read data from the provided column indexes</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_row_selection\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#194-199\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_row_selection\" class=\"fn\">with_row_selection</a>(self, selection: <a class=\"struct\" href=\"parquet/arrow/arrow_reader/selection/struct.RowSelection.html\" title=\"struct parquet::arrow::arrow_reader::selection::RowSelection\">RowSelection</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Provide a <a href=\"parquet/arrow/arrow_reader/selection/struct.RowSelection.html\" title=\"struct parquet::arrow::arrow_reader::selection::RowSelection\"><code>RowSelection</code></a> to filter out rows, and avoid fetching their\ndata into memory.</p>\n<p>This feature is used to restrict which rows are decoded within row\ngroups, skipping ranges of rows that are not needed. Such selections\ncould be determined by evaluating predicates against the parquet page\n<a href=\"parquet/file/page_index/index/enum.Index.html\" title=\"enum parquet::file::page_index::index::Index\"><code>Index</code></a> or some other external information available to a query\nengine.</p>\n<h5 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">ยง</a>Notes</h5>\n<p>Row group filtering (see <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#method.with_row_groups\" title=\"method parquet::arrow::arrow_reader::ArrowReaderBuilder::with_row_groups\"><code>Self::with_row_groups</code></a>) is applied prior to\napplying the row selection, and therefore rows from skipped row groups\nshould not be included in the <a href=\"parquet/arrow/arrow_reader/selection/struct.RowSelection.html\" title=\"struct parquet::arrow::arrow_reader::selection::RowSelection\"><code>RowSelection</code></a> (see example below)</p>\n<p>It is recommended to enable writing the page index if using this\nfunctionality, to allow more efficient skipping over data pages. See\n<a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderOptions.html#method.with_page_index\" title=\"method parquet::arrow::arrow_reader::ArrowReaderOptions::with_page_index\"><code>ArrowReaderOptions::with_page_index</code></a>.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">ยง</a>Example</h5>\n<p>Given a parquet file with 4 row groups, and a row group filter of <code>[0, 2, 3]</code>, in order to scan rows 50-100 in row group 2 and rows 200-300 in\nrow group 3:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>  Row Group 0, 1000 rows (selected)\n  Row Group 1, 1000 rows (skipped)\n  Row Group 2, 1000 rows (selected, but want to only scan rows 50-100)\n  Row Group 3, 1000 rows (selected, but want to only scan rows 200-300)</code></pre></div>\n<p>You could pass the following <a href=\"parquet/arrow/arrow_reader/selection/struct.RowSelection.html\" title=\"struct parquet::arrow::arrow_reader::selection::RowSelection\"><code>RowSelection</code></a>:</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code> Select 1000    (scan all rows in row group 0)\n Skip 50        (skip the first 50 rows in row group 2)\n Select 50      (scan rows 50-100 in row group 2)\n Skip 900       (skip the remaining rows in row group 2)\n Skip 200       (skip the first 200 rows in row group 3)\n Select 100     (scan rows 200-300 in row group 3)\n Skip 700       (skip the remaining rows in row group 3)</code></pre></div>\n<p>Note there is no entry for the (entirely) skipped row group 1.</p>\n<p>Note you can represent the same selection with fewer entries. Instead of</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code> Skip 900       (skip the remaining rows in row group 2)\n Skip 200       (skip the first 200 rows in row group 3)</code></pre></div>\n<p>you could use</p>\n<div class=\"example-wrap\"><pre class=\"language-text\"><code>Skip 1100      (skip the remaining 900 rows in row group 2 and the first 200 rows in row group 3)</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_row_filter\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#207-212\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_row_filter\" class=\"fn\">with_row_filter</a>(self, filter: <a class=\"struct\" href=\"parquet/arrow/arrow_reader/filter/struct.RowFilter.html\" title=\"struct parquet::arrow::arrow_reader::filter::RowFilter\">RowFilter</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Provide a <a href=\"parquet/arrow/arrow_reader/filter/struct.RowFilter.html\" title=\"struct parquet::arrow::arrow_reader::filter::RowFilter\"><code>RowFilter</code></a> to skip decoding rows</p>\n<p>Row filters are applied after row group selection and row selection</p>\n<p>It is recommended to enable reading the page index if using this functionality, to allow\nmore efficient skipping over data pages. See <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderOptions.html#method.with_page_index\" title=\"method parquet::arrow::arrow_reader::ArrowReaderOptions::with_page_index\"><code>ArrowReaderOptions::with_page_index</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_limit\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#221-226\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_limit\" class=\"fn\">with_limit</a>(self, limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Provide a limit to the number of rows to be read</p>\n<p>The limit will be applied after any <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#method.with_row_selection\" title=\"method parquet::arrow::arrow_reader::ArrowReaderBuilder::with_row_selection\"><code>Self::with_row_selection</code></a> and <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#method.with_row_filter\" title=\"method parquet::arrow::arrow_reader::ArrowReaderBuilder::with_row_filter\"><code>Self::with_row_filter</code></a>\nallowing it to limit the final set of rows decoded after any pushed down predicates</p>\n<p>It is recommended to enable reading the page index if using this functionality, to allow\nmore efficient skipping over data pages. See <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderOptions.html#method.with_page_index\" title=\"method parquet::arrow::arrow_reader::ArrowReaderOptions::with_page_index\"><code>ArrowReaderOptions::with_page_index</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_offset\" class=\"method\"><a class=\"src rightside\" href=\"src/parquet/arrow/arrow_reader/mod.rs.html#235-240\">Source</a><h4 class=\"code-header\">pub fn <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#tymethod.with_offset\" class=\"fn\">with_offset</a>(self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Provide an offset to skip over the given number of rows</p>\n<p>The offset will be applied after any <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#method.with_row_selection\" title=\"method parquet::arrow::arrow_reader::ArrowReaderBuilder::with_row_selection\"><code>Self::with_row_selection</code></a> and <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderBuilder.html#method.with_row_filter\" title=\"method parquet::arrow::arrow_reader::ArrowReaderBuilder::with_row_filter\"><code>Self::with_row_filter</code></a>\nallowing it to skip rows after any pushed down predicates</p>\n<p>It is recommended to enable reading the page index if using this functionality, to allow\nmore efficient skipping over data pages. See <a href=\"parquet/arrow/arrow_reader/struct.ArrowReaderOptions.html#method.with_page_index\" title=\"method parquet::arrow::arrow_reader::ArrowReaderOptions::with_page_index\"><code>ArrowReaderOptions::with_page_index</code></a></p>\n</div></details></div></details>",0,"parquet::arrow::arrow_reader::ParquetRecordBatchReaderBuilder","parquet::arrow::async_reader::ParquetRecordBatchStreamBuilder"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[14158]}