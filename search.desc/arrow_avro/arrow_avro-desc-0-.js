searchState.loadedDescShard("arrow_avro", 0, "Convert data to / from the Apache Arrow memory format and …\nRead Avro data to Arrow\nAn Avro datatype mapped to the arrow data model\nA named <code>AvroDataType</code>\nAn Avro encoding\nThe nulls are encoded as the first union variant\nThe nulls are encoded as the second union variant\nAvro types are not nullable, with nullability instead …\nResolves Avro type names to <code>AvroDataType</code>\nTimestampMicros(is_utc)\nTimestampMillis(is_utc)\nReturns the <code>Codec</code>\nReturns the arrow <code>Field</code>\nReturns an arrow <code>Field</code> with the given name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParses a <code>AvroDataType</code> from the provided <code>Schema</code> and the …\nThe metadata key used for storing the JSON encoded …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecoder for <code>Block</code>\nDecoder for <code>Header</code>\nReturn an iterator of <code>Block</code> from the provided <code>BufRead</code>\nRead a <code>Header</code> from the provided <code>BufRead</code>\nA file data block\nA decoder for <code>Block</code>\nThe number of objects in this block\nThe serialized objects within this block\nParse <code>Block</code> from <code>buf</code>, returning the number of bytes read\nFlush this decoder returning the parsed <code>Block</code> if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe sync marker\nDecoding a block count\nDecoding a block byte length\nFinished decoding\nA decoded header for an Object Container File\nA decoder for <code>Header</code>\nDecoding a key string\nDecoding a key length\nDecoding the <code>MAGIC</code> prefix\nDecoding sync marker\nDecoding a value payload\nDecoding a value length\nThe number of bytes remaining in the current string/bytes …\nReturns the <code>CompressionCodec</code> if any\nParse <code>Header</code> from <code>buf</code>, returning the number of bytes read\nFlush this decoder returning the parsed <code>Header</code> if any\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the value for a given metadata key if present\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe raw binary data of the metadata map\nThe end offsets of strings in <code>meta_buf</code>\nReturns an iterator over the meta keys in this header\nReturns the sync token for this file\nThe decoded sync marker\nThe number of remaining tuples in the current block\nDecoder for zig-zag encoded variable length (VLW) integers\nReturns the argument unchanged.\nScratch space for decoding VLQ integers\nCalls <code>U::from(self)</code>.\nDecode a signed long from <code>buf</code>\nAn array\nAdditional attributes within a <code>Schema</code>\nA complex type\nAn enumeration\nA field within a <code>Record</code>\nA fixed length binary array\nA map\nA primitive type\nA record\nThe metadata key used for storing the JSON encoded <code>Schema</code>\nAn Avro schema\nA type definition that is not a variant of <code>ComplexType</code>\nEither a <code>PrimitiveType</code> or a reference to a previously …\nAdditional JSON attributes\nReturns the field metadata for this <code>Attributes</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA logical type name")